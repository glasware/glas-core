// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glasware/glas-core/internal (interfaces: Surface)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actions "github.com/glasware/glas-core/internal/actions"
	connection "github.com/glasware/glas-core/internal/connection"
	gomock "github.com/golang/mock/gomock"
)

// MockSurface is a mock of Surface interface.
type MockSurface struct {
	ctrl     *gomock.Controller
	recorder *MockSurfaceMockRecorder
}

// MockSurfaceMockRecorder is the mock recorder for MockSurface.
type MockSurfaceMockRecorder struct {
	mock *MockSurface
}

// NewMockSurface creates a new mock instance.
func NewMockSurface(ctrl *gomock.Controller) *MockSurface {
	mock := &MockSurface{ctrl: ctrl}
	mock.recorder = &MockSurfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurface) EXPECT() *MockSurfaceMockRecorder {
	return m.recorder
}

// Aliases mocks base method.
func (m *MockSurface) Aliases() *actions.Aliases {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aliases")
	ret0, _ := ret[0].(*actions.Aliases)
	return ret0
}

// Aliases indicates an expected call of Aliases.
func (mr *MockSurfaceMockRecorder) Aliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aliases", reflect.TypeOf((*MockSurface)(nil).Aliases))
}

// CommandPrefix mocks base method.
func (m *MockSurface) CommandPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// CommandPrefix indicates an expected call of CommandPrefix.
func (mr *MockSurfaceMockRecorder) CommandPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandPrefix", reflect.TypeOf((*MockSurface)(nil).CommandPrefix))
}

// Connection mocks base method.
func (m *MockSurface) Connection() *connection.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*connection.Connection)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockSurfaceMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockSurface)(nil).Connection))
}

// Echo mocks base method.
func (m *MockSurface) Echo() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockSurfaceMockRecorder) Echo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockSurface)(nil).Echo))
}

// NewConnection mocks base method.
func (m *MockSurface) NewConnection(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConnection indicates an expected call of NewConnection.
func (mr *MockSurfaceMockRecorder) NewConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnection", reflect.TypeOf((*MockSurface)(nil).NewConnection), arg0, arg1)
}

// Write mocks base method.
func (m *MockSurface) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSurfaceMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSurface)(nil).Write), arg0)
}

// WriteF mocks base method.
func (m *MockSurface) WriteF(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteF", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteF indicates an expected call of WriteF.
func (mr *MockSurfaceMockRecorder) WriteF(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteF", reflect.TypeOf((*MockSurface)(nil).WriteF), varargs...)
}

// WriteLn mocks base method.
func (m *MockSurface) WriteLn(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLn indicates an expected call of WriteLn.
func (mr *MockSurfaceMockRecorder) WriteLn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLn", reflect.TypeOf((*MockSurface)(nil).WriteLn), arg0)
}
